#!/usr/bin/env bash
set -euo pipefail

# Platform detection
if [[ "$OSTYPE" == "darwin"* ]]; then
    export PLATFORM="macos"
else
    export PLATFORM="linux"
fi

LOG_FILE="/tmp/package-clean-$(date +%Y%m%d-%H%M%S).log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

log "🧹 Starting package cleanup ($PLATFORM)"
log "📝 Log file: $LOG_FILE"

if [[ "$PLATFORM" == "macos" ]]; then
    # macOS cleanup
    log "🍺 Running Homebrew cleanup..."
    
    # Clean up old versions
    echo ""
    read -p "🧹 Remove old Homebrew versions? [y/N]: " clean_old
    
    case $clean_old in
        [Yy]*)
            log "🧹 Cleaning up old Homebrew versions..."
            if brew cleanup 2>&1 | tee -a "$LOG_FILE"; then
                log "✅ Old versions cleaned up"
            else
                log "❌ Failed to clean up old versions"
            fi
            ;;
        *)
            log "⏭️  Old version cleanup skipped"
            ;;
    esac
    
    # Autoremove dependencies
    echo ""
    read -p "🗑️  Remove unused dependencies? [y/N]: " autoremove
    
    case $autoremove in
        [Yy]*)
            log "🗑️  Removing unused dependencies..."
            if brew autoremove 2>&1 | tee -a "$LOG_FILE"; then
                log "✅ Unused dependencies removed"
            else
                log "❌ Failed to remove unused dependencies"
            fi
            ;;
        *)
            log "⏭️  Autoremove skipped"
            ;;
    esac
    
    # Clean caches
    echo ""
    read -p "🧹 Clean Homebrew caches? [y/N]: " clean_cache
    
    case $clean_cache in
        [Yy]*)
            log "🧹 Cleaning Homebrew caches..."
            if brew cleanup --prune=all 2>&1 | tee -a "$LOG_FILE"; then
                log "✅ Caches cleaned"
            else
                log "❌ Failed to clean caches"
            fi
            ;;
        *)
            log "⏭️  Cache cleaning skipped"
            ;;
    esac
    
else
    # Linux cleanup
    # Find orphaned packages
    orphaned=$(pacman -Qtdq 2>/dev/null || true)

    if [[ -z "$orphaned" ]]; then
        log "✅ No orphaned packages found. System is clean!"
    else
        orphaned_count=$(echo "$orphaned" | wc -l)
        log "🗑️  Found $orphaned_count orphaned packages:"

        # Show orphaned packages with details
        echo "$orphaned" | while read -r pkg; do
            if [[ -n "$pkg" ]]; then
                size=$(pacman -Qi "$pkg" 2>/dev/null | grep '^Installed Size' | cut -d: -f2- | sed 's/^ *//' || echo "Unknown")
                echo "  📦 $pkg ($size)"
            fi
        done

        echo ""
        read -p "🗑️  Remove all orphaned packages? [y/N]: " confirm

        case $confirm in
            [Yy]*)
                log "🗑️  Removing orphaned packages..."
                if echo "$orphaned" | sudo pacman -Rns - 2>&1 | tee -a "$LOG_FILE"; then
                    log "✅ Successfully removed orphaned packages"
                else
                    log "❌ Failed to remove some orphaned packages"
                    exit 1
                fi
                ;;
            *)
                log "⏭️  Cleanup cancelled by user"
                ;;
        esac
    fi

    # Clean package cache
    echo ""
    read -p "🧹 Clean package cache? [y/N]: " clean_cache

    case $clean_cache in
        [Yy]*)
            log "🧹 Cleaning package cache..."
            if sudo pacman -Sc --noconfirm 2>&1 | tee -a "$LOG_FILE"; then
                log "✅ Package cache cleaned"
            else
                log "❌ Failed to clean package cache"
            fi
            ;;
        *)
            log "⏭️  Cache cleaning skipped"
            ;;
    esac
fi

log "🎉 Cleanup completed. Log available at: $LOG_FILE"

#!/usr/bin/env bash
set -euo pipefail

# Platform detection
if [[ "$OSTYPE" == "darwin"* ]]; then
    export PLATFORM="macos"
    export HOST=$(scutil --get LocalHostName 2>/dev/null || hostname -s)
    # Map macOS hostname to ship name (if not already a ship name)
    case "$HOST" in
        "Scotts-MacBook-Air-2") export HOST="voyager" ;;
        "voyager"|"enterprise"|"intrepid"|"defiant"|"reliant") 
            # Already a ship name, use as-is
            export HOST="$HOST" ;;
        *) 
            # Clean up hostname for use as directory name
            export HOST=$(echo "$HOST" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g') ;;
    esac
else
    export PLATFORM="linux"
    export HOST=$(hostnamectl --static 2>/dev/null || cat /proc/sys/kernel/hostname)
fi

GROUP_DIR="./group/$HOST"
LOG_FILE="/tmp/package-analyze-$(date +%Y%m%d-%H%M%S).log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Get explicitly installed packages
if [[ "$PLATFORM" == "macos" ]]; then
    # Combine Homebrew formulas and casks
    packages=$(brew list --formula 2>/dev/null; brew list --cask 2>/dev/null | sed 's/^/cask:/')
    total_packages=$(echo "$packages" | grep -v '^$' | wc -l)
else
    packages=$(pacman -Qe | awk '{print $1}')
    total_packages=$(echo "$packages" | wc -w)
fi
processed=0
skipped=0
removed=0
added=0

log "🔍 Starting package analysis for host '$HOST'"
log "📝 Log file: $LOG_FILE"
log "📦 Found $total_packages explicitly installed packages"

# Check if group directory exists
if [[ ! -d "$GROUP_DIR" ]]; then
    log "❌ Directory $GROUP_DIR does not exist"
    echo "Creating directory structure for hostname: $HOST"
    mkdir -p "$GROUP_DIR"
    
    # Create default files if they don't exist
    touch "$GROUP_DIR/base" "$GROUP_DIR/host"
    log "✅ Created default base and host files in $GROUP_DIR"
fi

log "🔍 Scanning $GROUP_DIR"

# Get list of group files
group_files=()
for f in "$GROUP_DIR"/*; do
    if [[ -f "$f" ]]; then
        group_files+=("$f")
    fi
done

if [[ ${#group_files[@]} -eq 0 ]]; then
    log "❌ No group files found in $GROUP_DIR"
    exit 1
fi

log "📁 Found ${#group_files[@]} group files: $(printf '%s ' "${group_files[@]##*/}")"

# Function to check if package exists in any group file
package_exists() {
    local pkg="$1"
    for file in "${group_files[@]}"; do
        if grep -q "^$pkg$" "$file" 2>/dev/null; then
            return 0
        fi
    done
    return 1
}

# Function to add package to file (avoiding duplicates)
add_package_to_file() {
    local pkg="$1"
    local file="$2"
    
    if ! grep -q "^$pkg$" "$file" 2>/dev/null; then
        echo "$pkg" >> "$file"
        # Sort and remove duplicates
        sort -u "$file" -o "$file"
        log "✅ Added '$pkg' to ${file##*/}"
        return 0
    else
        log "⚠️  Package '$pkg' already exists in ${file##*/}"
        return 1
    fi
}

# Process each package
for pkg in $packages; do
    ((processed++))
    
    if package_exists "$pkg"; then
        continue
    fi
    
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "📦 Package '$pkg' not found in any group file ($processed/$total_packages)"
    
    # Show package info
    if [[ "$PLATFORM" == "macos" ]]; then
        # Remove cask: prefix for display and info lookup
        display_pkg=$(echo "$pkg" | sed 's/^cask://')
        if [[ "$pkg" == cask:* ]]; then
            echo "📋 Type: Homebrew Cask"
            if brew info --cask "$display_pkg" &>/dev/null; then
                echo "📋 Description: $(brew info --cask "$display_pkg" 2>/dev/null | head -2 | tail -1)"
            fi
        else
            echo "📋 Type: Homebrew Formula"
            if brew info "$pkg" &>/dev/null; then
                echo "📋 Description: $(brew info "$pkg" 2>/dev/null | head -2 | tail -1)"
            fi
        fi
    else
        if pacman -Qi "$pkg" &>/dev/null; then
            echo "📋 Description: $(pacman -Qi "$pkg" | grep '^Description' | cut -d: -f2- | sed 's/^ *//')"
            echo "📏 Size: $(pacman -Qi "$pkg" | grep '^Installed Size' | cut -d: -f2- | sed 's/^ *//')"
        fi
    fi
    
    echo ""
    echo "Options:"
    echo "1. Skip (leave unmanaged)"
    echo "2. Remove (mark as dependency)"
    echo "3. Auto-add to 'base' (common packages)"
    echo "4. Auto-add to 'host' (host-specific packages)"
    
    # List group files for manual selection
    for i in "${!group_files[@]}"; do
        echo "$((i+5)). Add to ${group_files[$i]##*/}"
    done
    
    echo "q. Quit analysis"
    echo ""
    
    while true; do
        read -p "Enter your choice (1-$((${#group_files[@]}+4)), q): " choice
        
        case $choice in
            1)
                echo "⏭️  Skipped '$pkg'"
                ((skipped++))
                break
                ;;
            2)
                if [[ "$PLATFORM" == "macos" ]]; then
                    display_pkg=$(echo "$pkg" | sed 's/^cask://')
                    if [[ "$pkg" == cask:* ]]; then
                        if brew uninstall --cask "$display_pkg" 2>/dev/null; then
                            echo "🗑️  Removed cask '$display_pkg'"
                            log "🗑️  Removed cask '$display_pkg'"
                            ((removed++))
                        else
                            echo "❌ Failed to remove cask '$display_pkg'"
                        fi
                    else
                        if brew uninstall "$pkg" 2>/dev/null; then
                            echo "🗑️  Removed formula '$pkg'"
                            log "🗑️  Removed formula '$pkg'"
                            ((removed++))
                        else
                            echo "❌ Failed to remove formula '$pkg'"
                        fi
                    fi
                else
                    if sudo pacman -D --asdeps "$pkg" 2>/dev/null; then
                        echo "🗑️  Marked '$pkg' as dependency"
                        log "🗑️  Marked '$pkg' as dependency"
                        ((removed++))
                    else
                        echo "❌ Failed to mark '$pkg' as dependency"
                    fi
                fi
                break
                ;;
            3)
                if add_package_to_file "$pkg" "$GROUP_DIR/base"; then
                    ((added++))
                fi
                break
                ;;
            4)
                if add_package_to_file "$pkg" "$GROUP_DIR/host"; then
                    ((added++))
                fi
                break
                ;;
            q|Q)
                echo "🛑 Analysis stopped by user"
                break 2
                ;;
            *)
                if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 5 ]] && [[ "$choice" -le $((${#group_files[@]}+4)) ]]; then
                    selected_file="${group_files[$((choice-5))]}"
                    if add_package_to_file "$pkg" "$selected_file"; then
                        ((added++))
                    fi
                    break
                else
                    echo "❌ Invalid choice. Please try again."
                fi
                ;;
        esac
    done
done

# Summary
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
log "📊 Analysis Summary:"
log "📦 Total packages processed: $processed"
log "✅ Packages added to groups: $added"
log "⏭️  Packages skipped: $skipped"
log "🗑️  Packages marked as dependencies: $removed"
log "📝 Full log available at: $LOG_FILE"

# Show group file contents
echo ""
echo "📁 Current group file contents:"
for file in "${group_files[@]}"; do
    count=$(grep -c '^[^[:space:]]*$' "$file" 2>/dev/null || echo 0)
    echo "  ${file##*/}: $count packages"
done


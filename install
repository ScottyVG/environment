#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# ─── Configuration ─────────────────────────────────────────────────────────────
# Can override via environment or -d / -t options
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/dev/environment/dotfiles}"
TARGET_DIR="${TARGET_DIR:-$HOME}"
STOW_CMD="${STOW_CMD:-$(command -v stow || true)}"

# ─── Help ──────────────────────────────────────────────────────────────────────
usage() {
  cat <<EOF
Usage: $(basename "$0") [options] [package...]
Manage your dotfiles via GNU Stow.

Options:
  -d DIR    Dotfiles directory  (default: '$DOTFILES_DIR')
  -t DIR    Target directory    (default: '$TARGET_DIR')
  -n        Dry-run (pass --no) to stow
  -v        Verbose (pass --verbose to stow)
  -h        Show this help and exit

If no packages are specified, all first-level subdirectories of DOTFILES_DIR will be stowed.
EOF
  exit 0
}

# ─── Parse options ─────────────────────────────────────────────────────────────
DRY_RUN=""
VERBOSE=""
while getopts ":d:t:nvh" opt; do
  case "$opt" in
    d) DOTFILES_DIR="$OPTARG" ;;
    t) TARGET_DIR="$OPTARG" ;;
    n) DRY_RUN="--no" ;;
    v) VERBOSE="--verbose" ;;
    h) usage ;;
    *) echo "Invalid option: -$OPTARG" >&2; usage ;;
  esac
done
shift $((OPTIND-1))

# ─── Dependency check ──────────────────────────────────────────────────────────
if [[ -z "$STOW_CMD" ]]; then
  echo "Error: 'stow' not found in PATH. Please install GNU Stow." >&2
  exit 1
fi

# ─── Determine packages ────────────────────────────────────────────────────────
if [[ $# -gt 0 ]]; then
  PACKAGES=("$@")
else
  mapfile -t PACKAGES < <(find "$DOTFILES_DIR" -maxdepth 1 -mindepth 1 -type d -printf '%f\n')
fi

if [[ ${#PACKAGES[@]} -eq 0 ]]; then
  echo "No packages found under '$DOTFILES_DIR'." >&2
  exit 1
fi

# ─── Execute ──────────────────────────────────────────────────────────────────
for pkg in "${PACKAGES[@]}"; do
  echo "→ Stowing '$pkg' into '$TARGET_DIR'..."
  "$STOW_CMD" -R $DRY_RUN $VERBOSE -d "$DOTFILES_DIR" -t "$TARGET_DIR" "$pkg"
done

echo "✅ Done."

